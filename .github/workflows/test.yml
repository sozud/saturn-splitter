name: Build and test

on:
  push:
    branches:
      - main
    paths-ignore:
      - '*.md'
      - '**/*.md'
  pull_request_target:
    paths-ignore:
      - '.github/workflows/**'
      - '*.md'
      - '**/*.md'
  workflow_dispatch:

concurrency:
  group: ${{ github.ref }}-${{ github.job }}-${{ github.event_name }}-${{ github.number }}
  cancel-in-progress: false

jobs:
  build-and-test:
    if: github.repository == 'sozud/saturn-splitter'
    runs-on: ubuntu-latest
    steps:
      # - name: Install requirements
      #   run: sudo apt-get install gcc-mipsel-linux-gnu
      - name: Clone main repo (PR)
        if: github.event_name == 'pull_request_target'
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.after }}
          submodules: false
      - name: Clone main repo
        if: github.event_name != 'pull_request_target'
        uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}
          submodules: false
      - name: Clone dependencies
        uses: actions/checkout@v3
        with:
          repository: sozud/saturn-splitter-deps
          token: ${{ secrets.ACCESS_TOKEN }}
          path: 'saturn-splitter-deps'
      - name: Deps setup
        run: cp saturn-splitter-deps/T_BAT.PRG .
      # - name: Setting up dependencies
      #   working-directory: disks
      #   run: |
      #     cat dependencies/* > dependencies.tar.gz
      #     tar -xf dependencies.tar.gz
      #     mv *.cue sotn.${{ matrix.dependency }}.cue || mv *.iso sotn.${{ matrix.dependency }}.iso
      - name: Get compiler
        run: sh scripts/get_gccsh.sh
      - name: Build
        run: cd rust-dis && cargo build --release
      - name: Extract
        run: cd rust-dis && cargo run
      - name: Build docker containers
        run: sh scripts/docker/build_docker.sh
      - name: Compile
        run: sh scripts/compile_dosemu/compile_docker.sh   
      - name: Compare
        run: sh scripts/compile_dosemu/compare_docker.sh
  #     - name: Extract dependencies
  #       run: make extract_disk
  #     - name: Split game data
  #       if: matrix.version == 'us'
  #       run: make -j extract
  #     - name: Split game data (DRA only)
  #       if: matrix.version != 'us'
  #       run: make -j extract_dra
  #     - name: Build binaries
  #       if: matrix.version == 'us'
  #       run: make -j build
  #     - name: Build binaries (DRA only)
  #       if: matrix.version != 'us'
  #       run: make -j dra
  #     - name: Check if they match
  #       run: make check
  #     - name: Remove clutter from build folder
  #       run: rm -rf build/asm build/src
  #     - name: Export build folder
  #       if: github.ref == 'refs/heads/master' && github.event_name == 'push'
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: build_${{ matrix.version }}
  #         path: build/${{ matrix.version }}
  # generate-progress-report:
  #   strategy:
  #     matrix:
  #       version: ["us"]
  #       include:
  #         - dependency: us
  #           version: us
  #         # - dependency: pspeu
  #         #   version: hd
  #   if: github.ref == 'refs/heads/master' && github.event_name == 'push'
  #   needs: build-and-test
  #   runs-on: ubuntu-latest
  #   env:
  #     VERSION: ${{ matrix.version }}
  #     FROGRESS_API_BASE_URL: ${{ secrets.FROGRESS_API_BASE_URL }}
  #     FROGRESS_API_SECRET: ${{ secrets.FROGRESS_API_SECRET }}
  #     DISCORD_PROGRESS_WEBHOOK: ${{ secrets.DISCORD_PROGRESS_WEBHOOK }}
  #   steps:
  #     - name: Clone main repository
  #       uses: actions/checkout@v3
  #       with:
  #         submodules: false
  #     - name: Clone dependencies
  #       uses: actions/checkout@v3
  #       with:
  #         repository: xeeynamo/sotn-decomp-dependencies
  #         ref: ${{ matrix.version }}
  #         token: ${{ secrets.SOTN_DECOM_PRIVATE_REPO_TOKEN }}
  #         path: 'disks/dependencies'
  #     - name: Setting up dependencies
  #       working-directory: disks
  #       run: |
  #         cat dependencies/* > dependencies.tar.gz
  #         tar -xf dependencies.tar.gz
  #         mv *.cue sotn.${{ matrix.version }}.cue
  #     - name: Extract dependencies
  #       run: make extract_disk
  #     - name: Split game data
  #       run: make -j extract
  #     - name: Obtain built binaries
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: build_${{ matrix.version }}
  #         path: build/${{ matrix.version }}
  #     - name: Generate and send progress report
  #       run: python3 tools/progress.py --version ${{ matrix.version }}
  # generate-duplicates-report:
  #   strategy:
  #     matrix:
  #       version: ["us"]
  #   if: github.ref == 'refs/heads/master' && github.event_name == 'push'
  #   needs: build-and-test
  #   runs-on: ubuntu-latest
  #   env:
  #     VERSION: ${{ matrix.version }}
  #   steps:
  #     - name: Clone main repository
  #       uses: actions/checkout@v3
  #       with:
  #         submodules: false
  #     - name: Clone dependencies
  #       uses: actions/checkout@v3
  #       with:
  #         repository: xeeynamo/sotn-decomp-dependencies
  #         ref: ${{ matrix.version }}
  #         token: ${{ secrets.SOTN_DECOM_PRIVATE_REPO_TOKEN }}
  #         path: 'disks/dependencies'
  #     - name: Setting up dependencies
  #       working-directory: disks
  #       run: |
  #         cat dependencies/* > dependencies.tar.gz
  #         tar -xf dependencies.tar.gz
  #         mv *.cue sotn.${{ matrix.version }}.cue
  #     - name: Extract dependencies
  #       run: make extract_disk
  #     - name: Split game data
  #       run: make -j extract
  #     - name: Obtain built binaries
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: build_${{ matrix.version }}
  #         path: build/${{ matrix.version }}
  #     - name: Clone asset repository
  #       uses: actions/checkout@v3
  #       with:
  #         ref: 'gh-duplicates'
  #         path: 'gh-duplicates'
  #     - name: Set-up Python
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: '3.x'
  #     - name: Install secondary pre-requirements
  #       run: pip3 install -r tools/requirements-python.txt
  #     - name: Generate duplicates report
  #       run: python3 tools/find_duplicates.py -a
  #     - name: Rename output file into something more meaningful
  #       run: mv *_all_matches.txt gh-duplicates/duplicates.txt
  #     - name: Generate function report
  #       run: python3 tools/function_finder.py > gh-duplicates/functions.txt
  #     - name: Commit all reports
  #       run: |
  #           git config --global user.name 'GitHub Action' 
  #           git config --global user.email '41898282+github-actions[bot]@users.noreply.github.com'
  #           git add -A
  #           git commit -m 'Update reports' || true
  #           git push
  #       working-directory: gh-duplicates
